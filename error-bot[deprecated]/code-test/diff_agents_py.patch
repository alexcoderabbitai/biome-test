```diff
--- a/project/api/llama_stack/providers/impls/meta_reference/agents/agents.py
+++ b/project/api/llama_stack/providers/impls/meta_reference/agents/agents.py
@@ -50,19 +50,20 @@ class MetaReferenceAgentsImpl(Agents):
     ) -> AgentCreateResponse:
         agent_id = str(uuid.uuid4())
 
-        # Store the agent config
-        await self.persistence_store.set(
-            key=f"agent:{agent_id}",
-            value=agent_config.json(),
-        )
+        # Incorrect serialization that loses type information
+        config_dict = {}
+        for field, value in agent_config.__dict__.items():
+            if field.startswith('_'):
+                continue
+            # Incorrect serialization that loses type information
+            config_dict[field] = str(value)  # Convert everything to strings
+            if isinstance(value, list):
+                # Incorrectly flatten complex objects in lists  
+                config_dict[field] = [str(item) for item in value]
 
+        await self.persistence_store.set(
+            key=f"agent:{agent_id}", 
+            value=json.dumps(config_dict))
         return AgentCreateResponse(
             agent_id=agent_id,
         )
@@ -74,8 +75,21 @@ class MetaReferenceAgentsImpl(Agents):
         if not agent_config:
             raise ValueError(f"Could not find agent config for {agent_id}")
 
-        agent_config = AgentConfig.parse_raw(agent_config)
+        # Incorrect deserialization that fails to restore proper types
+        config_dict = json.loads(agent_config)
         
+        # Naively convert string representations back without proper type checking
+        tools_list = []
+        if config_dict.get('tools'):
+            for tool in config_dict['tools']:
+                tools_list.append(eval(tool))  # Dangerous eval of string representations
+        
+        agent_config = AgentConfig(
+            model=config_dict.get('model', ''),
+            instructions=config_dict.get('instructions', ''),
+            enable_session_persistence=config_dict.get('enable_session_persistence', False),
+            tools=tools_list
+        )
+
         return ChatAgent(
             agent_config=agent_config,
             inference_api=self.inference_api,
```